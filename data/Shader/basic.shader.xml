<?xml version="1.0" encoding="utf-8"?>
<effect>
<shaders>
<shader vsMainFunction = "VS" psMainFunction = "PS">
	
	<properties>
		<property type="VS" name = "gWorldViewProj" slot = "0" />
	</properties>
	
	<states>
		<state type = "ZWrite" data = "On" />
	</states>
	
	<vsShader program = 
	
	"
	cbuffer cbPerObject
	{
		float4x4 gWorldViewProj; 
	};
	
	
	struct VertexIn
	{
		float3 Pos   : POSITION;
		float3 Nor :	NORMAL;
		//float4 Color : COLOR;
		float2 UV : TEXCOORD0;
	};

	struct VertexOut
	{
		float4 PosH  : SV_POSITION;
		float depth : TEXCOORD0;
	};

	VertexOut VS(VertexIn vin)
	{
		VertexOut vout;
	
		// Transform to homogeneous clip space.
		
		vout.PosH = mul(float4(vin.Pos, 1.0f), gWorldViewProj);
		vout.depth = vout.PosH.z/vout.PosH.w;
    
		return vout;
	}"
	/>
	
	
	
	<psShader program = "
	
	struct VertexOut
	{
		float4 PosH  : SV_POSITION;
		float depth : TEXCOORD0;
	};
	
	float4 PS(VertexOut pin) : SV_TARGET
	{
		return float4(pin.depth, 0.0, 0.0, 1.0);
	}"
	/>
	
</shader>

<shader vsMainFunction = "VS" psMainFunction = "PS">
	
	<properties>
		<property type="VS" name = "gWorldViewProj" slot = "0" />
		<property type="VS" name = "lightWorldProj" slot = "1" />
	</properties>
	
	<states>
		<state type = "ZWrite" data = "On" />
	</states>
	
	<vsShader program = 
	
	"
	cbuffer cbPerObject
	{
		float4x4 gWorldViewProj; 
	};
	
	cbuffer cbPerObject
	{
		float4x4 lightViewProj; 
	};
	
	
	struct VertexIn
	{
		float3 Pos   : POSITION;
		float3 Nor :	NORMAL;
		//float4 Color : COLOR;
		float2 UV : TEXCOORD0;
	};

	struct VertexOut
	{
		float4 PosH  : SV_POSITION;
		float2 UV : TEXCOORD0;
		float2 DepthUV : TEXCOORD1;
		float depth : TEXCOORD2;
	};

	VertexOut VS(VertexIn vin)
	{
		VertexOut vout;
	
		// Transform to homogeneous clip space.
		
		vout.PosH = mul(float4(vin.Pos, 1.0f), gWorldViewProj);
		vout.UV = vin.UV;
		
		float4 pos = mul(float4(vin.Pos, 1.0f), gWorldViewProj*lightViewProj);
		vout.DepthUV = float2(pos.x/pos.w, pos.y/pos.w);
		vout.depth = pos.z/pos.w;
    
		return vout;
	}"
	/>
	
	
	
	<psShader program = "
	
	Texture2D gDiffuseMap : register(t0);
	Texture2D depthMap : register(t1);
	SamplerState samLinear : register(s0);
	
	struct VertexOut
	{
		float4 PosH  : SV_POSITION;
		//float4 Color : COLOR;
		float2 UV : TEXCOORD0;
		float2 DepthUV : TEXCOORD1;
		float depth : TEXCOORD2;
	};
	
	float4 PS(VertexOut pin) : SV_TARGET
	{
		float4 diffuse = gDiffuseMap.Sample(samLinear, pin.UV);
		float4 depthColor = depthMap.Sample(samLinear, pin.DepthUV);
		
		float depth = depthColor.x;
		float4 color = float4(0.5, 0.5, 0.5, 1.0);
		if (pin.depth < depth)
		  color = diffuse;
		  
		return float4(depthColor.x, depthColor.x, depthColor.x, 1.0);
	}"
	/>
	
</shader>
</shaders>

<techniques>
<technique>
<passes>
<pass shaderName="depth" />
<pass shaderName="shadow" />
</passes>
</technique>
</techniques>
</effect>


	  