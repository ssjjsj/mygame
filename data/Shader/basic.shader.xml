<?xml version="1.0" encoding="utf-8"?>
<shader vsMainFunction = "VS" psMainFunction = "PS">
	
	<properties>
		<property type="Matrix" name = "gWorldViewProj" slot = "0" />
		<property type="Texture" name = "gDiffuseMap"  slot = "0"/>
	</properties>
	
	<states>
		<state type = "ZWrite" data = "On" />
	</states>
	
	<vsShader program = 
	
	"
	cbuffer cbPerObject
	{
		float4x4 gWorldViewProj; 
	};
	
	
	struct VertexIn
	{
		float3 Pos   : POSITION;
		float3 Nor :	NORMAL;
		//float4 Color : COLOR;
		float2 UV : TEXCOORD0;
	};

	struct VertexOut
	{
		float4 PosH  : SV_POSITION;
		//float4 Color : COLOR;
		float2 UV : TEXCOORD0;
	};

	VertexOut VS(VertexIn vin)
	{
		VertexOut vout;
	
		// Transform to homogeneous clip space.
		float4x4 vp;
		vp[0][0] = 0.0750597417;
		vp[0][1] = 0.0;
		vp[0][2] = 0.0;
		vp[0][3] = 0.0;
		
		vp[1][0] = 0.0;
		vp[1][1] = 0.100079656;
		vp[1][2] =  0.0;
		vp[1][3] = 0.0;
		
		vp[2][0] = 0.0;
		vp[2][1] = 0.0;
		vp[2][2] = 0.101010099;
		vp[2][3] = 0.0;
		
		vp[3][0] = 0.0;
		vp[3][1] = 0.0;
		vp[3][2] = -1.01010096;
		vp[3][3] = 0.0;
		
		vout.PosH = mul(float4(vin.Pos, 1.0f), gWorldViewProj);
		//vout.PosH = float4(vin.Pos, 1.0f);
		//vout.PosH = vin.Pos;
	
		// Just pass vertex color into the pixel shader.
		//vout.Color = vin.Color;
		vout.UV = vin.UV;
    
		return vout;
	}"
	/>
	
	
	
	<psShader program = "
	
	Texture2D gDiffuseMap : register(t0);
	SamplerState samLinear : register(s0);
	
	struct VertexOut
	{
		float4 PosH  : SV_POSITION;
		//float4 Color : COLOR;
		float2 UV : TEXCOORD0;
	};
	
	float4 PS(VertexOut pin) : SV_TARGET
	{
		//return gDiffuseMap.Sample(samLinear, pin.UV);
		//textureColor = gDiffuseMap.Sample(SampleType, pin.UV);
		return float4(0.5, 0.5, 0.5, 1.0);
	}"
	/>
	
</shader>
	  